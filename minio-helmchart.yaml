---
apiVersion: v1
kind: Namespace
metadata:
  name: minio

---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: minio-operator
  namespace: kube-system
  labels:
    logme: "true"
spec:
  chart: operator
  repo: https://operator.min.io/
  version: 5.0.7
  targetNamespace: minio
  valuesContent: |-
    operator:
      replicaCount: 1
    console:
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
          nginx.ingress.kubernetes.io/auth-tls-secret: "cert-manager/client-ca-certificate"
          nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"
        host: minio.dzerv.art
        tls:
          - hosts:
              - minio.dzerv.art
            secretName: minio-dzerv-art-cert
---
apiVersion: minio.min.io/v2
kind: Tenant
metadata:
  name: tenant
  namespace: minio
  labels:
    app: minio
spec:
  features:
    bucketDNS: true
    domains:
      minio:
        - s3.dzerv.art
        - minio.minio.svc.cluster.local
  pools:
    - servers: 2
      name: pool
      volumesPerServer: 1

      volumeClaimTemplate:
        apiVersion: v1
        kind: persistentvolumeclaims
        metadata:
          name: minio-tenant-data
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 20Gi
          storageClassName: longhorn

# ---
# apiVersion: helm.cattle.io/v1
# kind: HelmChart
# metadata:
#   name: minio-tenant
#   namespace: kube-system
#   labels:
#     logme: "true"
# spec:
#   chart: tenant
#   repo: https://operator.min.io/
#   version: 5.0.7
#   targetNamespace: minio
#   valuesContent: |-
#     tenant:
#       name: tenant
#       features:
#         bucketDNS: true

#       pools:
#         - servers: 2
#           volumesPerServer: 1
#           size: 20Gi
#           storageClassName: longhorn

#     replicas: 2
#     persistence:
#       enabled: true
#       storageClass: longhorn
#       size: 50Gi

#     networkPolicy:
#       enabled: true

#     podDisruptionBudget:
#       enabled: true
#       minAvailable: 1

#     postJob:
#       securityContext:
#         enabled: true

#     resources:
#       requests:
#         cpu: 500m
#         memory: 1Gi
#       limits:
#         cpu: 2000m
#         memory: 2Gi

#     users:
#       - accessKey: console
#         secretKey: console123
#         policy: consoleAdmin
#       - accessKey: loki
#         secretKey: lokiloki
#         policy: loki

#     policies:
#       - name: loki
#         statements:
#           - resources:
#               - 'arn:aws:s3:::loki-*/*'
#             actions:
#               - "s3:ListBucket"
#               - "s3:PutObject"
#               - "s3:GetObject"
#               - "s3:DeleteObject"

#     buckets:
#     - name: loki-chunks
#       policy: private
#     - name: loki-ruler
#       policy: private
#     - name: loki-admin
#       policy: private

#     ingress:
#       enabled: true
#       ingressClassName: nginx
#       annotations:
#         cert-manager.io/cluster-issuer: letsencrypt
#         nginx.ingress.kubernetes.io/ssl-redirect: "true"
#         nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
#         nginx.ingress.kubernetes.io/auth-tls-secret: "cert-manager/client-ca-certificate"
#         nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"
#       hosts:
#         - s3.dzerv.art
#       tls:
#         - hosts:
#             - s3.dzerv.art
#           secretName: s3-dzerv-art-cert
