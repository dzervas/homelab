---
- name: Download k3s binary amd64
  get_url:
    url: "https://github.com/k3s-io/k3s/releases/download/{{ k3s_version }}/k3s"
    checksum: sha256:https://github.com/k3s-io/k3s/releases/download/{{ k3s_version }}/sha256sum-amd64.txt
    dest: /usr/local/bin/k3s
    owner: root
    group: root
    mode: '0755'
  when: ansible_facts.architecture == "x86_64"

- name: Download k3s binary arm64
  get_url:
    url: https://github.com/k3s-io/k3s/releases/download/{{ k3s_version }}/k3s-arm64
    checksum: sha256:https://github.com/k3s-io/k3s/releases/download/{{ k3s_version }}/sha256sum-arm64.txt
    dest: /usr/local/bin/k3s
    owner: root
    group: root
    mode: 0755
  when:
    - ( ansible_facts.architecture is search("arm") and
        ansible_facts.userspace_bits == "64" ) or
      ansible_facts.architecture is search("aarch64")


- name: Download k3s binary armhf
  get_url:
    url: https://github.com/k3s-io/k3s/releases/download/{{ k3s_version }}/k3s-armhf
    checksum: sha256:https://github.com/k3s-io/k3s/releases/download/{{ k3s_version }}/sha256sum-arm.txt
    dest: /usr/local/bin/k3s
    owner: root
    group: root
    mode: 0755
  when:
    - ansible_facts.architecture is search("arm")
    - ansible_facts.userspace_bits == "32"

- name: Create k3s config directory
  file:
    path: /etc/rancher/k3s
    recurse: true
    state: directory

- name: Update k3s resolv.conf
  copy:
    content: "nameserver 1.1.1.1\nnameserver 1.0.0.1"
    dest: /etc/rancher/k3s/resolv.conf
  notify: Restart k3s service

- name: Update k3s config.yaml
  template:
    src: config.yaml.j2
    dest: /etc/rancher/k3s/config.yaml
    owner: root
    group: root
    mode: '0600'
  notify: Restart k3s service

- name: K3s config check
  command: k3s check-config

- name: Update k3s service
  template:
    src: k3s.service.j2
    dest: /etc/systemd/system/k3s.service
  notify: Restart k3s service

- meta: flush_handlers
  when: inventory_hostname in groups.master

- name: Wait for agent-token
  wait_for:
    path: /var/lib/rancher/k3s/server/agent-token
    state: present
    timeout: 30
    delay: 1
  when: inventory_hostname in groups.master

- name: Slurp agent-token
  slurp:
    src: /var/lib/rancher/k3s/server/agent-token
  register: agent_token
  when: inventory_hostname in groups.master

- name: Set k3s_token fact
  set_fact:
    k3s_token: "{{ agent_token.content | b64decode | regex_replace('\n', '') }}"
  when: inventory_hostname in groups.master

- name: Update k3s service env
  copy:
    content: "K3S_TOKEN=\"{{ hostvars[groups.master[0]].k3s_token }}\""
    dest: /etc/systemd/system/k3s.service.env
    owner: root
    group: root
    mode: '0600'
  notify: Restart k3s service
  when: inventory_hostname not in groups.master

- name: Allow k3s traffic
  iptables:
    chain: INPUT
    protocol: "{{ item.protocol }}"
    destination_port: "{{ item.port }}"
    jump: ACCEPT
    state: present
  with_items:
    - port: 2379 # ETCD server
      protocol: tcp
    - port: 2380 # ETCD server
      protocol: tcp
    - port: 6443 # API server
      protocol: tcp
    - port: 8472 # Flannel VXLAN
      protocol: udp
    - port: 10250 # Kubelet Metrics
      protocol: tcp

- name: Allow pod & service traffic (ingress)
  iptables:
    chain: INPUT
    source: "{{ item }}"
    jump: ACCEPT
    state: present
  with_items:
    - 10.42.0.0/16
    - 10.43.0.0/16


- name: Allow pod & service traffic (egress)
  iptables:
    chain: INPUT
    destination: "{{ item }}"
    jump: ACCEPT
    state: present
  with_items:
    - 10.42.0.0/16
    - 10.43.0.0/16

- name: Start k3s
  service:
    name: k3s
    state: started
    enabled: yes
    daemon_reload: yes

# - meta: flush_handlers
